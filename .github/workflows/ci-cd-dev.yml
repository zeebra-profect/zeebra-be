name: Backend CI/CD - Develop

on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]
    paths-ignore:
      - '**.md'
      - '**/README*'

concurrency:
  group: backend-develop
  cancel-in-progress: true

jobs:
  ci:
    name: CI (Build)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build (Gradle)
        run: ./gradlew build -x test

  cd:
    name: CD (Deploy to EC2 via SSM)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Spring Project
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        run: |
          TAG=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "IMAGE_TAG=dev-${SHORT_SHA}-${TAG}" >> $GITHUB_ENV

      - name: Build & Push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPO_BE_DEV }}:${IMAGE_TAG} \
                       -t ${{ secrets.ECR_REPO_BE_DEV }}:dev .
          docker push ${{ secrets.ECR_REPO_BE_DEV }}:${IMAGE_TAG}
          docker push ${{ secrets.ECR_REPO_BE_DEV }}:dev

      - name: Deploy to EC2 via SSM (pull & restart with .env)
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO: ${{ secrets.ECR_REPO_BE_DEV }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          PARAM_PATH: "/"                      # SSM 파라미터 경로 (trailing slash 유지)
          CONTAINER_NAME: "zeebra-be"
          HOST_PORT: "8080"
          CONTAINER_PORT: "8080"
        run: |
          IMAGE_URI="${ECR_REPO}:${IMAGE_TAG}"

    
          TARGET_OPT="--instance-ids ${{ secrets.EC2_INSTANCE_ID }}"
  

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy ${IMAGE_URI}" \
            $TARGET_OPT \
            --parameters commands='[
              "set -euo pipefail",
              "sudo mkdir -p /opt/app && sudo mkdir -p /opt/env && sudo chown -R ubuntu:ubuntu /opt",
              "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin '"$ECR_REPO"'",

              "# (2) 최신 이미지 pull",
              "docker pull '"$IMAGE_URI"'",

              "# (3) SSM 파라미터를 .env로 생성",
              "aws ssm get-parameters-by-path --path '"$PARAM_PATH"' --with-decryption --recursive --region '"$AWS_REGION"' --query \"Parameters[*].{Name:Name,Value:Value}\" --output text \
                | awk '\''{sub(\"^'"$PARAM_PATH"'\",\"\",$1); print $1\"=\"$2}'\'' > /opt/env/dev.env",

              "# (4) 고정 env 추가(프로필/로깅 등은 여기서 덮어씀)",
              "echo SPRING_PROFILES_ACTIVE=dev >> /opt/env/dev.env",
              "echo SERVER_PORT='"$CONTAINER_PORT"' >> /opt/env/dev.env",

              "# (5) 컨테이너 재기동",
              "docker stop '"$CONTAINER_NAME"' || true",
              "docker rm '"$CONTAINER_NAME"' || true",
              "docker run -d --name '"$CONTAINER_NAME"' --restart unless-stopped \
                 --env-file /opt/env/dev.env \
                 -p 127.0.0.1:'"$HOST_PORT"':'"$CONTAINER_PORT"' \
                 '"$IMAGE_URI"'",

              "# (6) 상태 확인",
              "sleep 2 && docker ps --filter name='"$CONTAINER_NAME"'",
              "curl -s -o /dev/null -w \"HTTP %{http_code}\\n\" http://127.0.0.1:'"$HOST_PORT"' || true"
            ]' \
            --region $AWS_REGION \
            --timeout-seconds 600